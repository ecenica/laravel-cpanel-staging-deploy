name: Deploy to Staging
on:
  push:
    branches: [ staging ]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install rsync
        run: sudo apt-get update && sudo apt-get install -y rsync

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql
          coverage: none

      - name: Install Node dependencies
        run: npm ci

      - name: Install PHP dependencies
        run: composer install --optimize-autoloader --no-dev

      - name: Build assets
        run: npm run build

      - name: Create deployment package
        run: |
          mkdir deploy-package
          rsync -av --exclude-from='.deployignore' . deploy-package/

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.CPANEL_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H -p 2244 ${{ secrets.CPANEL_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to cPanel
        run: |
          rsync -avz --delete \
            -e "ssh -p 2244" \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='node_modules' \
            --exclude='.env' \
            deploy-package/ \
            ${{ secrets.CPANEL_USERNAME }}@${{ secrets.CPANEL_HOST }}:${{ secrets.CPANEL_PATH }}/

      - name: Run deployment commands
        run: |
          ssh -p 2244 ${{ secrets.CPANEL_USERNAME }}@${{ secrets.CPANEL_HOST }} << 'EOF'
            cd ${{ secrets.CPANEL_PATH }}

            # Write custom .htaccess to root
            cat > .htaccess <<'HTACCESS_EOF'
          <IfModule mod_rewrite.c>
              RewriteEngine On
              # Handle Authorization Header
              RewriteCond %{HTTP:Authorization} .
              RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
              # Prevent direct access to directories and files
              RewriteCond %{REQUEST_FILENAME} -d [OR]
              RewriteCond %{REQUEST_FILENAME} -f
              RewriteRule ^ - [L]
              # Redirect requests for static files to the public directory
              RewriteCond %{REQUEST_URI} (\.\w+$) [NC]
              RewriteRule ^(.*)$ public/$1 [L]
              # Redirect all other requests to index.php
              RewriteCond %{REQUEST_FILENAME} !-d
              RewriteCond %{REQUEST_FILENAME} !-f
              RewriteRule ^ index.php [L]
          </IfModule>
          <IfModule mod_negotiation.c>
              Options -MultiViews
          </IfModule>
          HTACCESS_EOF
            echo ".htaccess deployed to root."

            # Write custom index.php to root
            cat > index.php <<'INDEX_EOF'
          <?php
          /**
           * Laravel - A PHP Framework For Web Artisans
           *
           * @package  Laravel
           * @author   Taylor Otwell <taylor@laravel.com>
           */
          $uri = urldecode(
              parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH)
          );
          // This file allows us to emulate Apache's "mod_rewrite" functionality from the
          // built-in PHP web server. This provides a convenient way to test a Laravel
          // application without having installed a "real" web server software here.
          /*if ($uri !== '/' && file_exists(__DIR__.'/public'.$uri)) {
              return false;
          }*/
          require_once __DIR__.'/public/index.php';
          INDEX_EOF
            echo "index.php deployed to root."

            # Run Laravel optimization commands
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan migrate --force
            php artisan icons:clear

            echo "Deployment completed successfully."
          EOF
